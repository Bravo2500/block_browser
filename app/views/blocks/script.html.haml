- @script_sig_str = @script_sig ? format_script(Bitcoin::Script.new(@script_sig).to_string) : ""
- @pk_script_str = @pk_script ? format_script(Bitcoin::Script.new(@pk_script).to_string) : ""
- @sig_hash_str = @sig_hash ? @sig_hash.hth : ""

= form_tag("/script") do
  %table{style: "width: 100%"}
    %tr
      %th Transaction
      %td
        - if @tx && @txin
          = link_to "#{@tx.hash}:#{@txin.tx_idx}", tx_path(@tx.hash)
        - else
          Not found
          (#{link_to "Link to this script", "/script/#{@script_sig_str.gsub("\n", " ")}/#{@pk_script_str.gsub("\n", " ")}/#{@sig_hash_str}"})
    %tr
      %th{style: "width: 10em"} Input Script
      %td
        = text_area_tag :script_sig, @script_sig_str, rows: @script_sig_str.lines.count, style: "width: 100%"
    %tr
      %th Output Script
      %td
        = text_area_tag :pk_script, @pk_script_str, rows: @pk_script_str.lines.count, style: "width: 100%"
    %tr
      %th Signature Hash
      %td
        = text_field_tag :sig_hash, @sig_hash_str, size: 64
        Optional; If empty, all signatures are assumed to be valid.

    %tr
      %th Verify
      %td
        - { minimaldata: "Check that all numbers are encoded with the minimum possible number of bytes",
            sigpushonly: "Check that the script_sig only contains pushes, no opcodes",
            cleanstack: "Check that the scripts leaves a clean stack",
            dersig: "Check that all signatures are in valid DER encoding",
            low_s: "Check that all signatures have non-negative S values",
            strictenc: "Check that all signatures and pubkeys are in canonical encoding",
          }.each do |flag, desc|
          = hidden_field_tag "verify_#{flag}", "0"
          = check_box_tag "verify_#{flag}", "1", @options[:"verify_#{flag}"], id: "verify_#{flag}_cb"
          - klass = (@debug && @debug[-1] == :"verify_#{flag}") ? "error" : ""
          = label_tag "verify_#{flag}_cb", flag, title: desc, class: klass
        (hover for info)

    %tr
      %th Result
      %th
        %pre= @result
        = submit_tag "(Re-)Run Script", style: "float: right;"

  - if @inner_script
    %h3 Inner P2SH Script
    %pre.p2sh_script= @inner_script.to_string.gsub("\s", "\n")

    .p2sh_script_data
      %h4 Addresses / Data
      - if @inner_script.is_op_return?
        %pre= @inner_script.get_op_return_data
      - else
        - @inner_script.get_addresses.each do |addr|
          = address_link(addr)
          %br/

  .clear

  - if @script && @debug

    %h3 Execution Trace

    - i = 0
    %table#debug
      %tr
        %th Stack
        %th Operation
        %th Description
      - (@debug.size / 2).times do
        - op, stack = @debug[i+1], @debug[i]
        - if op
          %tr
            %td
              %pre= raw stack.map(&:inspect).join("<br />")
            %th
              %pre= op
            %td
              - case op
              - when /PUSH DATA/
                %pre Data is pushed onto the stack.
              - when *(2..16).map {|i| "OP_#{i}" }
                %pre The number #{op.split("_")[1]} is pushed onto the stack.
              - when "RESULT"
                %pre True if the remaining stack is anything other than empty or 0.
              - when :verify_minimaldata
                %pre Not all numbers are encoded with the minimum possible number of bytes!
              - when :verify_sigpushonly
                %pre The script_sig may only contain PUSHDATA operations, no other opcodes!
              - when :verify_cleanstack
                %pre The script may not leave any values on the stack after successful execution!
              - else
                - comment = Bitcoin::Script.instance_method(@debug[i+1].downcase).comment rescue ""
                %pre= comment.split(/\n?#\s/).map(&:strip).join("\n")
          - break  if op == "INVALID TRANSACTION" # an OP_*VERIFY operation has failed
        - i += 2
