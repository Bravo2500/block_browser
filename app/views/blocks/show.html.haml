%table.details
  - cache("block/#{@block.hash}/details_1") do
    %tr
      %th Block
      %th= @block.hash
    %tr
      %th Height
      %td
        = @block.height
        - unless @block.chain == 0
          %span{style: "color: red"} (Side Chain)
    - if @siblings.any?
      %tr
        %th Siblings
        %td= @siblings.map {|s| link_to s.hash, block_path(s.hash) }.join("<br/>").html_safe
    %tr
      %th Prev Block
      %td= link_to @block.prev_block_hash.reverse_hth, block_path(@block.prev_block_hash.reverse_hth)
  %tr
    %th Next Block
    - blk = STORE.db[:blk][prev_hash: @block.hash.htb.to_sequel_blob, chain: @block.chain]
    - if blk
      %td= link_to(blk[:hash].hth, block_path(blk[:hash].hth))
    - else
      %td not seen
  - cache("block/#{@block.hash}/details_2") do
    %tr
      %th Merkle Root
      %td= @block.mrkl_root.reverse.unpack("H*")[0]
    %tr
      %th Time
      %td= format_time @block.time
    %tr
      %th Transactions
      %td= number_with_delimiter @block.tx.size
    %tr
      %th Size
      %td= number_to_human_size @block.to_payload.bytesize
    %tr
      %th Total Value
      %td= format_amount(@block.tx.map(&:out).flatten.map(&:value).sum)
    %tr
      %th Formats
      %td
        = link_to "[json]", "/block/#{@block.hash}.json"
        = link_to "[hex]", "/block/#{@block.hash}.hex"
        = link_to "[binary]", "/block/#{@block.hash}.bin"

- cache("block/#{@block.hash}/tx") do
  %h3 Transactions
  %table.list
    %tr
      %th Hash
      %th Inputs
      %th Outputs
      %th Size
      %th Value
    = render :partial => 'tx', :collection => @block.tx