%table.list
  %tr
    %th Tx
    %th Block
    %th Address
    %th Type
    %th Value
    %th Total

  - @addr_txouts.each do |addr_txout|
    - txout = STORE.wrap_txout(STORE.db[:txout][id: addr_txout[:txout_id]])
    - tx = txout.get_tx
    - blk = STORE.db[:blk_tx].where(tx_id: tx.id).join(:blk, id: :blk_id).first
    - next  unless blk
    - @addr_data[:tx_in_sz] += 1
    - @addr_data[:btc_in] += txout.value

    %tr{:class => cycle('odd', 'even')}
      %td= link_to(tx.hash, tx_path(tx.hash))
      %td= link_to(blk[:height], block_path(blk[:hash].hth))
      %td
        - STORE.db[:txin].where(tx_id: tx.id).order(:tx_idx).each do |prev_in|
          - txin = STORE.wrap_txin(prev_in)
          - if txin.coinbase?
            generation
          - else
            - prev_out = txin.get_prev_out
            - if prev_out
              = address_link(prev_out.get_address)
            - else
              unknown
            %br/

        %td.incoming= "->"
        %td.value= format_amount(txout.value)
        %td.value= format_amount(@addr_data[:btc_in] - @addr_data[:btc_out])

    - if next_in = txout.get_next_in
      - tx = next_in.get_tx
      - blk = STORE.db[:blk_tx].where(tx_id: tx.id).join(:blk, id: :blk_id).first
      - next  unless blk
      - @addr_data[:tx_out_sz] += 1
      - @addr_data[:btc_out] += txout.value

      %tr{:class => cycle('odd', 'even')}
        %td= link_to(tx.hash, tx_path(tx.hash))
        %td= link_to(blk[:height], block_path(blk[:hash].hth))
        %td

          %table.tx_outs{cellpadding: 0, cellspacing: 0}
            - tx.out.map do |o|
              %tr
                %td
                  - o.get_addresses.map do |addr|
                    = address_link(addr)
                    %br/
                %td (#{format_amount o.value})
        %td.outgoing= "<-"
        %td.value.outgoing= "- #{format_amount(txout.value)}"
        %td.value= format_amount(@addr_data[:btc_in] - @addr_data[:btc_out])
